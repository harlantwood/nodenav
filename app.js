// Generated by CoffeeScript 1.6.2
(function() {
  var root,
    __hasProp = {}.hasOwnProperty;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.collections_viz = function(json_path) {
    return d3.json(json_path, function(data) {
      var format, height, node, pack, vis, viz_data, width;

      viz_data = node_trees_to_d3(data);
      width = 1000;
      height = 700;
      format = d3.format(",d");
      pack = d3.layout.pack().size([width - 4, height - 4]).value(function(d) {
        return d.size;
      });
      vis = d3.select("#viz-collections").append("svg").attr("width", width).attr("height", height).attr("class", "pack").append("g").attr("transform", "translate(2, 2)");
      node = vis.data([data]).selectAll("#viz-collections g.node").data(pack.nodes).enter().append("g").attr("class", function(d) {
        if (d.children) {
          return "node";
        } else {
          return "leaf node";
        }
      }).attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      node.append("title").text(function(d) {
        return d.name + (d.children ? "" : ": " + format(d.size));
      });
      node.append("circle").attr("r", function(d) {
        return d.r;
      }).on("click", function(d) {
        if (d.children) {
          return window.location = d.url;
        } else {
          return void 0;
        }
      });
      return node.filter(function(d) {
        return d.children;
      }).append("text").attr("text-anchor", "middle").attr("dy", ".3em").text(function(d) {
        if (d.name.length <= d.r / 3) {
          return d.name;
        } else {
          return "";
        }
      });
    });
  };

  root.node_trees_to_d3 = function(node_trees, root_node) {
    var properties, property_name, type, weight;

    if (root_node != null) {
      return {
        "name": root_node,
        "children": (function() {
          var _ref, _results;

          _ref = node_trees[root_node];
          _results = [];
          for (type in _ref) {
            if (!__hasProp.call(_ref, type)) continue;
            properties = _ref[type];
            if (type) {
              _results.push({
                "name": type,
                "children": (function() {
                  var _results1;

                  _results1 = [];
                  for (property_name in properties) {
                    if (!__hasProp.call(properties, property_name)) continue;
                    weight = properties[property_name];
                    _results1.push({
                      "name": property_name,
                      "size": weight
                    });
                  }
                  return _results1;
                })()
              });
            }
          }
          return _results;
        })()
      };
    } else {
      return {
        "name": Object.keys(node_trees[""][""])[0],
        "children": (function() {
          var _ref, _results;

          _ref = node_trees[""];
          _results = [];
          for (type in _ref) {
            if (!__hasProp.call(_ref, type)) continue;
            properties = _ref[type];
            if (type) {
              _results.push({
                "name": type,
                "children": (function() {
                  var _results1;

                  _results1 = [];
                  for (property_name in properties) {
                    if (!__hasProp.call(properties, property_name)) continue;
                    weight = properties[property_name];
                    _results1.push({
                      "name": property_name,
                      "size": weight
                    });
                  }
                  return _results1;
                })()
              });
            }
          }
          return _results;
        })()
      };
    }
  };

}).call(this);
