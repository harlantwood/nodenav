// Generated by CoffeeScript 1.6.2
(function() {
  var root,
    __hasProp = {}.hasOwnProperty;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.collections_viz = function(json_path) {
    return d3.json(json_path, function(node_trees) {
      var d3_node_trees;

      d3_node_trees = node_trees_to_d3_trees(node_trees);
      return root.render_viz(d3_node_trees, "");
    });
  };

  root.render_viz = function(d3_node_trees, key) {
    var d3_node_tree, format, height, node, pack, vis, width;

    d3_node_tree = d3_node_trees[key];
    $('#viz-graph').empty();
    width = 1000;
    height = 700;
    format = d3.format(",d");
    pack = d3.layout.pack().size([width - 4, height - 4]).value(function(d) {
      return d.size;
    });
    vis = d3.select("#viz-graph").append("svg").attr("width", width).attr("height", height).attr("class", "pack").append("g").attr("transform", "translate(2, 2)");
    node = vis.data([d3_node_tree]).selectAll("#viz-graph g.node").data(pack.nodes).enter().append("g").attr("class", function(d) {
      if (d.children) {
        return "node";
      } else {
        return "leaf node";
      }
    }).attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    node.append("title").text(function(d) {
      return d.name + (d.children ? "" : ": " + format(d.size));
    });
    node.append("circle").attr("r", function(d) {
      return d.r;
    }).filter(function(d) {
      return !d.children;
    }).on("click", function(d) {
      return root.render_viz(d3_node_trees, d.name);
    });
    return node.filter(function(d) {
      return !d.children;
    }).append("text").attr("text-anchor", "middle").attr("dy", ".3em").text(function(d) {
      if (d.name.length <= d.r / 3) {
        return d.name;
      } else {
        return "";
      }
    });
  };

  root.node_trees_to_d3_trees = function(node_trees) {
    var node_tree, tree_data, tree_name, viz_data;

    viz_data = {};
    for (tree_name in node_trees) {
      if (!__hasProp.call(node_trees, tree_name)) continue;
      tree_data = node_trees[tree_name];
      node_tree = new NodeTree(tree_name, tree_data);
      viz_data[tree_name] = node_tree.to_d3();
    }
    return viz_data;
  };

}).call(this);
