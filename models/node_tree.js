// Generated by CoffeeScript 1.6.2
(function() {
  var root,
    __hasProp = {}.hasOwnProperty;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.NodeTree = (function() {
    var NOT_A_COLOR;

    NOT_A_COLOR = ['Invalid Color Name', 'Invalid Color Name', 'Invalid Color Name'];

    function NodeTree(name, properties) {
      this.name = name;
      this.properties = properties;
      if (typeof this.name !== "string") {
        throw "ArgumentException";
      }
      if (!(this.properties instanceof Object)) {
        throw "ArgumentException";
      }
    }

    NodeTree.prototype.to_d3 = function() {
      var property_name, weight;

      return {
        "name": this.name,
        "children": (function() {
          var _ref, _results;

          _ref = this.properties;
          _results = [];
          for (property_name in _ref) {
            if (!__hasProp.call(_ref, property_name)) continue;
            weight = _ref[property_name];
            if (property_name) {
              _results.push({
                "name": property_name,
                "size": weight
              });
            }
          }
          return _results;
        }).call(this)
      };
    };

    NodeTree.prototype.color = function() {
      var color_flock, colors, property_name, rgb_color, weight, _ref;

      colors = [[0, 0, 0]];
      _ref = this.properties;
      for (property_name in _ref) {
        if (!__hasProp.call(_ref, property_name)) continue;
        weight = _ref[property_name];
        if (!(property_name)) {
          continue;
        }
        rgb_color = Colors.name2rgb(property_name);
        if (!_.isEqual(rgb_color.a, NOT_A_COLOR)) {
          colors.push(rgb_color.a);
        }
      }
      this.color = (function() {
        var _i, _len, _ref1, _results;

        _ref1 = _.zip.apply(_, colors);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          color_flock = _ref1[_i];
          _results.push(_.reduce(color_flock, (function(memo, num) {
            return memo + parseInt(num);
          }), 0));
        }
        return _results;
      })();
      this.normalize_color();
      return Colors.rgb2hex.apply(Colors, this.color);
    };

    NodeTree.prototype.normalize_color = function() {
      var component, max_component;

      max_component = _.max(this.color);
      if (max_component > 255) {
        return this.color = (function() {
          var _i, _len, _ref, _results;

          _ref = this.color;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            component = _ref[_i];
            _results.push(Math.round((component / max_component) * 255));
          }
          return _results;
        }).call(this);
      }
    };

    return NodeTree;

  })();

}).call(this);
