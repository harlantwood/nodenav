// Generated by CoffeeScript 1.6.2
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.collections_viz = function(json_path) {
    return d3.json(json_path, function(data) {
      var diagonal, diameter, svg, tree;

      diameter = 960;
      tree = d3.layout.tree().size([360, diameter / 2 - 120]).separation(function(a, b) {
        return (a.parent === b.parent ? 1 : 2) / a.depth;
      });
      diagonal = d3.svg.diagonal.radial().projection(function(d) {
        return [d.y, d.x / 180 * Math.PI];
      });
      svg = d3.select("body").append("svg").attr("width", diameter).attr("height", diameter - 150).append("g").attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");
      d3.json(json_path, function(error, root) {
        var link, links, node, nodes;

        nodes = tree.nodes(root);
        links = tree.links(nodes);
        link = svg.selectAll(".link").data(links).enter().append("path").attr("class", "link").attr("d", diagonal);
        node = svg.selectAll(".node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
          return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")";
        });
        node.append("circle").attr("r", 4.5);
        return node.append("text").attr("dy", ".31em").attr("text-anchor", function(d) {
          if (d.x < 180) {
            return "start";
          } else {
            return "end";
          }
        }).attr("transform", function(d) {
          if (d.x < 180) {
            return "translate(8)";
          } else {
            return "rotate(180)translate(-8)";
          }
        }).text(function(d) {
          return d.name;
        });
      });
      return d3.select(self.frameElement).style("height", diameter - 150 + "px");
    });
  };

}).call(this);
