// Generated by CoffeeScript 1.6.2
(function() {
  var BASE_WEIGHT, csv, csv_data, find_parent, insert, name, nodes, source, target, _, _ref;

  _ = require('underscore');

  csv = require('csv');

  BASE_WEIGHT = 1;

  _ref = process.argv.slice(2), source = _ref[0], target = _ref[1];

  name = _.last(target.split('/')).replace(/\.\w+$/, '');

  nodes = {};

  csv_data = csv().from.path(source);

  csv_data.to.array(function(rows) {
    var column_index, headers, json, node, parent_node, property_headers, property_name, row, row_index, _i, _j, _len, _len1;

    rows = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        _results.push((function() {
          var _j, _len1, _results1;

          _results1 = [];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            node = row[_j];
            _results1.push(node.trim());
          }
          return _results1;
        })());
      }
      return _results;
    })();
    headers = rows.shift();
    property_headers = headers.slice(0);
    property_headers.shift();
    insert("name", name);
    for (row_index = _i = 0, _len = rows.length; _i < _len; row_index = ++_i) {
      row = rows[row_index];
      if (row[0]) {
        insert("", row[0]);
      }
      for (column_index = _j = 0, _len1 = row.length; _j < _len1; column_index = ++_j) {
        node = row[column_index];
        if (node) {
          property_name = headers[column_index];
          insert(property_name, node);
          if ((parent_node = find_parent(headers, row, column_index))) {
            insert(parent_node, node);
          }
        }
      }
    }
    json = JSON.stringify(nodes, null, 4);
    return console.log(json);
  });

  find_parent = function(headers, row, column_index) {
    var i, parent;

    i = column_index;
    while (headers[i] === headers[i - 1] && i >= 0) {
      i--;
    }
    parent = i - 1;
    return row[parent];
  };

  insert = function(key1, key2) {
    var _base, _ref1, _ref2;

    if ((_ref1 = nodes[key1]) == null) {
      nodes[key1] = {};
    }
    if ((_ref2 = (_base = nodes[key1])[key2]) == null) {
      _base[key2] = 0;
    }
    return nodes[key1][key2] += 1;
  };

}).call(this);
