// Generated by CoffeeScript 1.6.2
(function() {
  var BASE_WEIGHT, csv, csv_data, insert, log_if, name, nodes, source, target, _, _ref;

  _ = require('underscore');

  csv = require('csv');

  BASE_WEIGHT = 1;

  _ref = process.argv.slice(2), source = _ref[0], target = _ref[1];

  name = _.last(target.split('/')).replace(/\.\w+$/, '');

  nodes = {};

  csv_data = csv().from.path(source);

  csv_data.to.array(function(rows) {
    var column_index, done, headers, node, property, property_headers, property_name, row, row_content, row_index, _i, _j, _k, _len, _len1, _len2, _results;

    rows = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        _results.push((function() {
          var _j, _len1, _results1;

          _results1 = [];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            node = row[_j];
            _results1.push(node.trim());
          }
          return _results1;
        })());
      }
      return _results;
    })();
    headers = rows.shift();
    property_headers = headers.slice(0);
    property_headers.shift();
    insert("", "", name);
    _results = [];
    for (row_index = _i = 0, _len = rows.length; _i < _len; row_index = ++_i) {
      row = rows[row_index];
      if (row[0]) {
        insert("", headers[0], row[0]);
      }
      for (column_index = _j = 0, _len1 = row.length; _j < _len1; column_index = ++_j) {
        node = row[column_index];
        if (node) {
          property_name = headers[column_index];
          insert(node, "type", property_name);
          insert(property_name, "nodes", node);
        }
      }
      row_content = row.shift();
      for (column_index = _k = 0, _len2 = row.length; _k < _len2; column_index = ++_k) {
        property = row[column_index];
        if (property) {
          property_name = property_headers[column_index];
          insert(row_content, property_name, property);
        }
      }
      done = row_index === rows.length - 1;
      _results.push(log_if(done));
    }
    return _results;
  });

  insert = function(key1, key2, key3) {
    var _base, _ref1, _ref2;

    if ((_ref1 = nodes[key1]) == null) {
      nodes[key1] = {};
    }
    if ((_ref2 = (_base = nodes[key1])[key2]) == null) {
      _base[key2] = {};
    }
    if (nodes[key1][key2][key3]) {
      return nodes[key1][key2][key3] += 1;
    } else {
      return nodes[key1][key2][key3] = BASE_WEIGHT;
    }
  };

  log_if = function(really) {
    var json;

    if (really) {
      json = JSON.stringify(nodes, null, 4);
      return console.log(json);
    }
  };

}).call(this);
